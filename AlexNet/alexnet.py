# -*- coding: utf-8 -*-
"""AlexNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-lpLKhbPG50TEFTrx_bljA-1JHySLoKg
"""

import numpy as np
import os
import cv2 as cv
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Input, Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
from keras.utils.vis_utils import plot_model

train_folders_directory = 'drive/MyDrive/data/train/'
import os
print(os.listdir(train_folders_directory))

train_datagen = ImageDataGenerator(
        rescale=1 / 255.0,
        rotation_range=20,
        zoom_range=0.05,
        width_shift_range=0.05,
        height_shift_range=0.05,
        shear_range=0.05,
        horizontal_flip=True,
        fill_mode="nearest",
        validation_split=0.20)

train_generator = train_datagen.flow_from_directory(
    directory=train_folders_directory,
    target_size=(227, 227),
    color_mode="rgb",
    batch_size=128,
    class_mode="categorical",
    subset='training',
    shuffle=True,
    seed=7
)

valid_generator = train_datagen.flow_from_directory(
    directory=train_folders_directory,
    target_size=(227, 227),
    color_mode="rgb",
    batch_size=128,
    class_mode="categorical",
    subset='validation',
    shuffle=True,
    seed=7
)

def AlexNet():
  AlexNet = Sequential()
  AlexNet.add(Conv2D(filters=96, kernel_size=(11,11), strides=(4,4), activation='relu', input_shape=(227,227,3)))
  AlexNet.add(MaxPooling2D(pool_size=(3,3), strides=(2,2)))
  AlexNet.add(Conv2D(filters=256, kernel_size=(5,5), strides=(1,1), activation='relu', padding="same"))
  AlexNet.add(MaxPooling2D(pool_size=(3,3), strides=(2,2)))
  AlexNet.add(Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), activation='relu', padding="same"))
  AlexNet.add(Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), activation='relu', padding="same"))
  AlexNet.add(Conv2D(filters=256, kernel_size=(3,3), strides=(1,1), activation='relu', padding="same"))
  AlexNet.add(MaxPooling2D(pool_size=(3,3), strides=(2,2)))
  AlexNet.add(Flatten())
  AlexNet.add(Dense(4096, activation='relu'))
  AlexNet.add(Dropout(0.5))
  AlexNet.add(Dense(4096, activation='relu'))
  AlexNet.add(Dropout(0.5))
  AlexNet.add(Dense(2, activation='softmax'))
  AlexNet.compile(loss="categorical_crossentropy", metrics=["accuracy"], optimizer="adam")
  return AlexNet

AlexNet().summary()

plot_model(AlexNet(), to_file='drive/MyDrive/AlexNet_plot.png', show_shapes=True, show_layer_names=True)

AlexNet_model = AlexNet()
AlexNet_history = AlexNet_model.fit(train_generator, epochs=50, validation_data=valid_generator, shuffle=True, validation_steps=len(valid_generator),batch_size=32)

AlexNet_accuracy = AlexNet_history.history['accuracy']
AlexNet_val_accuracy = AlexNet_history.history['val_accuracy']
AlexNet_loss = AlexNet_history.history['loss']
AlexNet_val_loss = AlexNet_history.history['val_loss']
AlexNet_epochs = range(50)

plt.plot(AlexNet_epochs, AlexNet_accuracy, "b", label="AlexNet_trainning accuracy")
plt.plot(AlexNet_epochs, AlexNet_val_accuracy, "r", label="AlexNet_validation accuracy")
plt.legend()
plt.show()

plt.plot(AlexNet_epochs, AlexNet_loss, "b", label="AlexNet_trainning loss")
plt.plot(AlexNet_epochs, AlexNet_val_loss, "r", label="AlexNet_validation loss")
plt.legend()
plt.show()

AlexNet_model.save("drive/MyDrive/AlexNet.h5")
AlexNet_model.save("drive/MyDrive/AlexNet.model")